;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;char Keypad();
;void main(void)
; 0000 0011 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0012 int lcd_position = 0;  // Track the LCD position
; 0000 0013 char number;
; 0000 0014 DDRC = 0b00000111;
;	lcd_position -> R16,R17
;	number -> R19
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0015 PORTC = 0b11111000;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0016 lcd_init(16);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0017 while (1)
;PCODE: $00000016 VOL: 0
; 0000 0018 {
; 0000 0019 // Please write your application code here
; 0000 001A number = Keypad();
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 001B 
; 0000 001C // Display the pressed number on the LCD
; 0000 001D lcd_gotoxy(lcd_position % 16, lcd_position / 16);  // Set LCD position
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 001E lcd_printf("%d", number);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 001F 
; 0000 0020 // Increment the LCD position
; 0000 0021 lcd_position++;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0022 
; 0000 0023 // If the LCD is full, clear it and start over
; 0000 0024 if (lcd_position >= 16 * 2)
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0025 {
; 0000 0026 lcd_clear();
;PCODE: $00000031 VOL: 0
; 0000 0027 lcd_position = 0;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0028 }
; 0000 0029 
; 0000 002A // Delay to prevent multiple inputs in a short time
; 0000 002B delay_ms(500);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 002C }
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 002D }
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;char Keypad()
; 0000 0033 {
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0034 while (1)
;PCODE: $0000003E VOL: 0
; 0000 0035 {
; 0000 0036 PORTC.0 = 0; // col 1 is active
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0037 PORTC.1 = 1; // col 2 is inactive
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0038 PORTC.2 = 1; // col 3 is inactive
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0039 switch (PINC)
;PCODE: $00000045 VOL: 0
; 0000 003A {
; 0000 003B case 0b11110110:
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 003C while (PINC.3 == 0);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 003D return 1;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 003E break;
;PCODE: $00000050 VOL: 0
; 0000 003F 
; 0000 0040 case 0b11101110:
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0041 while (PINC.4 == 0);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0042 return 4;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0043 break;
;PCODE: $0000005C VOL: 0
; 0000 0044 
; 0000 0045 case 0b11011110:
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0046 while (PINC.5 == 0);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0047 return 7;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0048 break;
;PCODE: $00000068 VOL: 0
; 0000 0049 
; 0000 004A case 0b10111110:
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 004B while (PINC.6 == 0);
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 004C return 10; // '*' is returned as 10
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 004D break;
;PCODE: $00000074 VOL: 0
; 0000 004E }
;PCODE: $00000075 VOL: 0
; 0000 004F 
; 0000 0050 PORTC.0 = 1; // col 1 is inactive
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0051 PORTC.1 = 0; // col 2 is active
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0052 PORTC.2 = 1; // col 3 is inactive
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0053 switch (PINC)
;PCODE: $0000007C VOL: 0
; 0000 0054 {
; 0000 0055 case 0b11110101:
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0056 while (PINC.3 == 0);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0057 return 2;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0058 break;
;PCODE: $00000087 VOL: 0
; 0000 0059 
; 0000 005A case 0b11101101:
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 005B while (PINC.4 == 0);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 005C return 5;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 005D break;
;PCODE: $00000093 VOL: 0
; 0000 005E 
; 0000 005F case 0b11011101:
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0060 while (PINC.5 == 0);
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0061 return 8;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0062 break;
;PCODE: $0000009F VOL: 0
; 0000 0063 
; 0000 0064 case 0b10111101:
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0065 while (PINC.6 == 0);
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0066 return 0;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0067 break;
;PCODE: $000000AB VOL: 0
; 0000 0068 }
;PCODE: $000000AC VOL: 0
; 0000 0069 
; 0000 006A PORTC.0 = 1; // col 1 is inactive
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 006B PORTC.1 = 1; // col 2 is inactive
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 006C PORTC.2 = 0; // col 3 is active
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 006D switch (PINC)
;PCODE: $000000B3 VOL: 0
; 0000 006E {
; 0000 006F case 0b11110011:
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0070 while (PINC.3 == 0);
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 0071 return 3;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 0072 break;
;PCODE: $000000BE VOL: 0
; 0000 0073 
; 0000 0074 case 0b11101011:
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 0075 while (PINC.4 == 0);
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0076 return 6;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 0077 break;
;PCODE: $000000CA VOL: 0
; 0000 0078 
; 0000 0079 case 0b11011011:
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 007A while (PINC.5 == 0);
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 007B return 9;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 007C break;
;PCODE: $000000D6 VOL: 0
; 0000 007D 
; 0000 007E case 0b110111011:
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 007F while (PINC.6 == 0);
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 0080 return 11; // '#' is returned as 11
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 0081 break;
;PCODE: $000000E2 VOL: 0
; 0000 0082 }
;PCODE: $000000E3 VOL: 0
; 0000 0083 }
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 0084 }
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
